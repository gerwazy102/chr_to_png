// Define NES color palette

use once_cell::sync::Lazy;
use std::{collections::HashMap, error::Error};

const NES_PALETTE_2C05_99: [u8; 192] = [
    0x86, 0x85, 0x8A, 0x16, 0x31, 0x7D, 0x0B, 0x09, 0x95, 0x85, 0x75, 0xC3, 0x7E, 0x2F, 0x57, 0x92,
    0x34, 0x57, 0x98, 0x59, 0x1C, 0x89, 0x6B, 0x27, 0x60, 0x51, 0x17, 0x2C, 0x40, 0x13, 0x15, 0x55,
    0x43, 0x1A, 0x6B, 0x29, 0x0C, 0x3C, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xCC, 0xCE, 0xD2, 0x27, 0x68, 0xBB, 0x1E, 0x4F, 0xC5, 0x7C, 0x30, 0xAF, 0x96, 0x38, 0xB2, 0xBE,
    0x41, 0x72, 0xB1, 0x33, 0x05, 0xC0, 0x90, 0x35, 0x8C, 0x79, 0x2D, 0x49, 0x7B, 0x32, 0x1D, 0x6C,
    0x2A, 0x31, 0x93, 0x8A, 0x2D, 0x7C, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFD, 0xFF, 0xFF, 0x96, 0xBD, 0xEF, 0xA2, 0xA8, 0xE6, 0xCE, 0x9F, 0xE0, 0xBF, 0x43, 0xB3, 0xE6,
    0xA7, 0xE5, 0xDC, 0xAB, 0x41, 0xE7, 0xC5, 0x4B, 0xDF, 0xD8, 0x5E, 0x92, 0xC1, 0x50, 0x3F, 0xBB,
    0x4A, 0x96, 0xEA, 0xF2, 0x53, 0xD8, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFD, 0xFF, 0xFF, 0xC7, 0xDF, 0xFA, 0xDA, 0xCD, 0xF2, 0xF5, 0xD6, 0xF8, 0xEA, 0xBC, 0xED, 0xEE,
    0xD1, 0xCA, 0xF5, 0xE7, 0xBC, 0xFC, 0xFB, 0x9C, 0xFF, 0xFF, 0xC0, 0xD8, 0xF4, 0xA2, 0xC2, 0xF0,
    0xB5, 0x96, 0xEA, 0xF2, 0xBF, 0xE2, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

const NES_PALETTE_2C07: [u8; 192] = [
    0x62, 0x62, 0x62, 0x00, 0x2E, 0x98, 0x0C, 0x11, 0xC2, 0x3B, 0x00, 0xC2, 0x65, 0x00, 0x98, 0x7D,
    0x00, 0x4E, 0x7D, 0x00, 0x00, 0x65, 0x19, 0x00, 0x3B, 0x36, 0x00, 0x0C, 0x4F, 0x00, 0x00, 0x5B,
    0x00, 0x00, 0x59, 0x00, 0x00, 0x49, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAB, 0xAB, 0xAB, 0x00, 0x64, 0xF4, 0x35, 0x3C, 0xFF, 0x76, 0x1B, 0xFF, 0xAE, 0x0A, 0xF4, 0xCF,
    0x0C, 0x8F, 0xCF, 0x23, 0x1C, 0xAE, 0x47, 0x00, 0x76, 0x6F, 0x00, 0x35, 0x90, 0x00, 0x00, 0xA1,
    0x00, 0x00, 0x9E, 0x1C, 0x00, 0x88, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0x4A, 0xB5, 0xFF, 0x85, 0x8C, 0xFF, 0xC8, 0x6A, 0xFF, 0xFF, 0x58, 0xFF, 0xFF,
    0x5B, 0xE2, 0xFF, 0x72, 0x6A, 0xFF, 0x97, 0x02, 0xC8, 0xC1, 0x00, 0x85, 0xE3, 0x00, 0x4A, 0xF5,
    0x02, 0x29, 0xF2, 0x6A, 0x29, 0xDB, 0xE2, 0x4E, 0x4E, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xB6, 0xE1, 0xFF, 0xCE, 0xD1, 0xFF, 0xE9, 0xC3, 0xFF, 0xFF, 0xBC, 0xFF, 0xFF,
    0xBD, 0xF4, 0xFF, 0xC6, 0xC3, 0xFF, 0xD5, 0x9A, 0xE9, 0xE6, 0x81, 0xCE, 0xF4, 0x81, 0xB6, 0xFB,
    0x9A, 0xA9, 0xFA, 0xC3, 0xA9, 0xF0, 0xF4, 0xB8, 0xB8, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

static NES_PALETTE_MAP: Lazy<HashMap<&'static str, [u8; 192]>> = Lazy::new(|| {
    let mut map: HashMap<&str, _> = HashMap::new();
    map.insert("2C05-99", NES_PALETTE_2C05_99);
    map.insert("2C07", NES_PALETTE_2C07);
    // Add more entries as needed
    map
});

pub fn get_palette_types() -> String {
    let keys: Vec<String> = NES_PALETTE_MAP.keys().map(|&key| key.to_string()).collect();
    keys.join(",")
}

// Function to get RGB values from NES color index
pub fn nes_to_rgb(
    nes_color: usize,
    nes_palette_type: String,
) -> Result<image::Rgba<u8>, Box<dyn Error>> {
    let index = nes_color * 3;
    match NES_PALETTE_MAP.get(&nes_palette_type.as_str()) {
        Some(palette) => Ok(image::Rgba([
            palette[index],
            palette[index + 1],
            palette[index + 2],
            255,
        ])),
        None => Err(format!(
            "Palette not found. Please use one of available palettes: {}",
            get_palette_types()
        )
        .into()),
    }
}
